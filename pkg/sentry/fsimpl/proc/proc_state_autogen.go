// automatically generated by stateify.

package proc

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *FilesystemType) beforeSave() {}
func (x *FilesystemType) save(m state.Map) {
	x.beforeSave()
}

func (x *FilesystemType) afterLoad() {}
func (x *FilesystemType) load(m state.Map) {
}

func (x *subtasksInode) beforeSave() {}
func (x *subtasksInode) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeNotSymlink", &x.InodeNotSymlink)
	m.Save("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Save("InodeAttrs", &x.InodeAttrs)
	m.Save("OrderedChildren", &x.OrderedChildren)
	m.Save("AlwaysValid", &x.AlwaysValid)
	m.Save("locks", &x.locks)
	m.Save("fs", &x.fs)
	m.Save("task", &x.task)
	m.Save("pidns", &x.pidns)
	m.Save("cgroupControllers", &x.cgroupControllers)
}

func (x *subtasksInode) afterLoad() {}
func (x *subtasksInode) load(m state.Map) {
	m.Load("InodeNotSymlink", &x.InodeNotSymlink)
	m.Load("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Load("InodeAttrs", &x.InodeAttrs)
	m.Load("OrderedChildren", &x.OrderedChildren)
	m.Load("AlwaysValid", &x.AlwaysValid)
	m.Load("locks", &x.locks)
	m.Load("fs", &x.fs)
	m.Load("task", &x.task)
	m.Load("pidns", &x.pidns)
	m.Load("cgroupControllers", &x.cgroupControllers)
}

func (x *taskInode) beforeSave() {}
func (x *taskInode) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeNotSymlink", &x.InodeNotSymlink)
	m.Save("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Save("InodeNoDynamicLookup", &x.InodeNoDynamicLookup)
	m.Save("InodeAttrs", &x.InodeAttrs)
	m.Save("OrderedChildren", &x.OrderedChildren)
	m.Save("locks", &x.locks)
	m.Save("task", &x.task)
}

func (x *taskInode) afterLoad() {}
func (x *taskInode) load(m state.Map) {
	m.Load("InodeNotSymlink", &x.InodeNotSymlink)
	m.Load("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Load("InodeNoDynamicLookup", &x.InodeNoDynamicLookup)
	m.Load("InodeAttrs", &x.InodeAttrs)
	m.Load("OrderedChildren", &x.OrderedChildren)
	m.Load("locks", &x.locks)
	m.Load("task", &x.task)
}

func (x *fdDirInode) beforeSave() {}
func (x *fdDirInode) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeNotSymlink", &x.InodeNotSymlink)
	m.Save("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Save("InodeAttrs", &x.InodeAttrs)
	m.Save("OrderedChildren", &x.OrderedChildren)
	m.Save("AlwaysValid", &x.AlwaysValid)
	m.Save("fdDir", &x.fdDir)
}

func (x *fdDirInode) afterLoad() {}
func (x *fdDirInode) load(m state.Map) {
	m.Load("InodeNotSymlink", &x.InodeNotSymlink)
	m.Load("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Load("InodeAttrs", &x.InodeAttrs)
	m.Load("OrderedChildren", &x.OrderedChildren)
	m.Load("AlwaysValid", &x.AlwaysValid)
	m.Load("fdDir", &x.fdDir)
}

func (x *fdSymlink) beforeSave() {}
func (x *fdSymlink) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeAttrs", &x.InodeAttrs)
	m.Save("InodeNoopRefCount", &x.InodeNoopRefCount)
	m.Save("InodeSymlink", &x.InodeSymlink)
	m.Save("task", &x.task)
	m.Save("fd", &x.fd)
}

func (x *fdSymlink) afterLoad() {}
func (x *fdSymlink) load(m state.Map) {
	m.Load("InodeAttrs", &x.InodeAttrs)
	m.Load("InodeNoopRefCount", &x.InodeNoopRefCount)
	m.Load("InodeSymlink", &x.InodeSymlink)
	m.Load("task", &x.task)
	m.Load("fd", &x.fd)
}

func (x *fdInfoDirInode) beforeSave() {}
func (x *fdInfoDirInode) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeNotSymlink", &x.InodeNotSymlink)
	m.Save("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Save("InodeAttrs", &x.InodeAttrs)
	m.Save("OrderedChildren", &x.OrderedChildren)
	m.Save("AlwaysValid", &x.AlwaysValid)
	m.Save("fdDir", &x.fdDir)
}

func (x *fdInfoDirInode) afterLoad() {}
func (x *fdInfoDirInode) load(m state.Map) {
	m.Load("InodeNotSymlink", &x.InodeNotSymlink)
	m.Load("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Load("InodeAttrs", &x.InodeAttrs)
	m.Load("OrderedChildren", &x.OrderedChildren)
	m.Load("AlwaysValid", &x.AlwaysValid)
	m.Load("fdDir", &x.fdDir)
}

func (x *fdInfoData) beforeSave() {}
func (x *fdInfoData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("AtomicRefCount", &x.AtomicRefCount)
	m.Save("task", &x.task)
	m.Save("fd", &x.fd)
}

func (x *fdInfoData) afterLoad() {}
func (x *fdInfoData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("AtomicRefCount", &x.AtomicRefCount)
	m.Load("task", &x.task)
	m.Load("fd", &x.fd)
}

func (x *auxvData) beforeSave() {}
func (x *auxvData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *auxvData) afterLoad() {}
func (x *auxvData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *cmdlineData) beforeSave() {}
func (x *cmdlineData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
	m.Save("arg", &x.arg)
}

func (x *cmdlineData) afterLoad() {}
func (x *cmdlineData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
	m.Load("arg", &x.arg)
}

func (x *commInode) beforeSave() {}
func (x *commInode) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *commInode) afterLoad() {}
func (x *commInode) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *commData) beforeSave() {}
func (x *commData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *commData) afterLoad() {}
func (x *commData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *idMapData) beforeSave() {}
func (x *idMapData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
	m.Save("gids", &x.gids)
}

func (x *idMapData) afterLoad() {}
func (x *idMapData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
	m.Load("gids", &x.gids)
}

func (x *mapsData) beforeSave() {}
func (x *mapsData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *mapsData) afterLoad() {}
func (x *mapsData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *smapsData) beforeSave() {}
func (x *smapsData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *smapsData) afterLoad() {}
func (x *smapsData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *taskStatData) beforeSave() {}
func (x *taskStatData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
	m.Save("tgstats", &x.tgstats)
	m.Save("pidns", &x.pidns)
}

func (x *taskStatData) afterLoad() {}
func (x *taskStatData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
	m.Load("tgstats", &x.tgstats)
	m.Load("pidns", &x.pidns)
}

func (x *statmData) beforeSave() {}
func (x *statmData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *statmData) afterLoad() {}
func (x *statmData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *statusData) beforeSave() {}
func (x *statusData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
	m.Save("pidns", &x.pidns)
}

func (x *statusData) afterLoad() {}
func (x *statusData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
	m.Load("pidns", &x.pidns)
}

func (x *ioData) beforeSave() {}
func (x *ioData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("ioUsage", &x.ioUsage)
}

func (x *ioData) afterLoad() {}
func (x *ioData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("ioUsage", &x.ioUsage)
}

func (x *oomScoreAdj) beforeSave() {}
func (x *oomScoreAdj) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *oomScoreAdj) afterLoad() {}
func (x *oomScoreAdj) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *exeSymlink) beforeSave() {}
func (x *exeSymlink) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeAttrs", &x.InodeAttrs)
	m.Save("InodeNoopRefCount", &x.InodeNoopRefCount)
	m.Save("InodeSymlink", &x.InodeSymlink)
	m.Save("task", &x.task)
}

func (x *exeSymlink) afterLoad() {}
func (x *exeSymlink) load(m state.Map) {
	m.Load("InodeAttrs", &x.InodeAttrs)
	m.Load("InodeNoopRefCount", &x.InodeNoopRefCount)
	m.Load("InodeSymlink", &x.InodeSymlink)
	m.Load("task", &x.task)
}

func (x *mountInfoData) beforeSave() {}
func (x *mountInfoData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *mountInfoData) afterLoad() {}
func (x *mountInfoData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *mountsData) beforeSave() {}
func (x *mountsData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("task", &x.task)
}

func (x *mountsData) afterLoad() {}
func (x *mountsData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("task", &x.task)
}

func (x *ifinet6) beforeSave() {}
func (x *ifinet6) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("stack", &x.stack)
}

func (x *ifinet6) afterLoad() {}
func (x *ifinet6) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("stack", &x.stack)
}

func (x *netDevData) beforeSave() {}
func (x *netDevData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("stack", &x.stack)
}

func (x *netDevData) afterLoad() {}
func (x *netDevData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("stack", &x.stack)
}

func (x *netUnixData) beforeSave() {}
func (x *netUnixData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("kernel", &x.kernel)
}

func (x *netUnixData) afterLoad() {}
func (x *netUnixData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("kernel", &x.kernel)
}

func (x *netTCPData) beforeSave() {}
func (x *netTCPData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("kernel", &x.kernel)
}

func (x *netTCPData) afterLoad() {}
func (x *netTCPData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("kernel", &x.kernel)
}

func (x *netTCP6Data) beforeSave() {}
func (x *netTCP6Data) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("kernel", &x.kernel)
}

func (x *netTCP6Data) afterLoad() {}
func (x *netTCP6Data) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("kernel", &x.kernel)
}

func (x *netUDPData) beforeSave() {}
func (x *netUDPData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("kernel", &x.kernel)
}

func (x *netUDPData) afterLoad() {}
func (x *netUDPData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("kernel", &x.kernel)
}

func (x *netSnmpData) beforeSave() {}
func (x *netSnmpData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("stack", &x.stack)
}

func (x *netSnmpData) afterLoad() {}
func (x *netSnmpData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("stack", &x.stack)
}

func (x *netRouteData) beforeSave() {}
func (x *netRouteData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("stack", &x.stack)
}

func (x *netRouteData) afterLoad() {}
func (x *netRouteData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("stack", &x.stack)
}

func (x *netStatData) beforeSave() {}
func (x *netStatData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("stack", &x.stack)
}

func (x *netStatData) afterLoad() {}
func (x *netStatData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("stack", &x.stack)
}

func (x *tasksInode) beforeSave() {}
func (x *tasksInode) save(m state.Map) {
	x.beforeSave()
	m.Save("InodeNotSymlink", &x.InodeNotSymlink)
	m.Save("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Save("InodeAttrs", &x.InodeAttrs)
	m.Save("OrderedChildren", &x.OrderedChildren)
	m.Save("AlwaysValid", &x.AlwaysValid)
	m.Save("locks", &x.locks)
	m.Save("fs", &x.fs)
	m.Save("pidns", &x.pidns)
	m.Save("selfSymlink", &x.selfSymlink)
	m.Save("threadSelfSymlink", &x.threadSelfSymlink)
	m.Save("cgroupControllers", &x.cgroupControllers)
}

func (x *tasksInode) afterLoad() {}
func (x *tasksInode) load(m state.Map) {
	m.Load("InodeNotSymlink", &x.InodeNotSymlink)
	m.Load("InodeDirectoryNoNewChildren", &x.InodeDirectoryNoNewChildren)
	m.Load("InodeAttrs", &x.InodeAttrs)
	m.Load("OrderedChildren", &x.OrderedChildren)
	m.Load("AlwaysValid", &x.AlwaysValid)
	m.Load("locks", &x.locks)
	m.Load("fs", &x.fs)
	m.Load("pidns", &x.pidns)
	m.Load("selfSymlink", &x.selfSymlink)
	m.Load("threadSelfSymlink", &x.threadSelfSymlink)
	m.Load("cgroupControllers", &x.cgroupControllers)
}

func (x *statData) beforeSave() {}
func (x *statData) save(m state.Map) {
	x.beforeSave()
	m.Save("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *statData) afterLoad() {}
func (x *statData) load(m state.Map) {
	m.Load("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *loadavgData) beforeSave() {}
func (x *loadavgData) save(m state.Map) {
	x.beforeSave()
	m.Save("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *loadavgData) afterLoad() {}
func (x *loadavgData) load(m state.Map) {
	m.Load("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *meminfoData) beforeSave() {}
func (x *meminfoData) save(m state.Map) {
	x.beforeSave()
	m.Save("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *meminfoData) afterLoad() {}
func (x *meminfoData) load(m state.Map) {
	m.Load("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *uptimeData) beforeSave() {}
func (x *uptimeData) save(m state.Map) {
	x.beforeSave()
	m.Save("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *uptimeData) afterLoad() {}
func (x *uptimeData) load(m state.Map) {
	m.Load("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *versionData) beforeSave() {}
func (x *versionData) save(m state.Map) {
	x.beforeSave()
	m.Save("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *versionData) afterLoad() {}
func (x *versionData) load(m state.Map) {
	m.Load("dynamicBytesFileSetAttr", &x.dynamicBytesFileSetAttr)
}

func (x *filesystemsData) beforeSave() {}
func (x *filesystemsData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
}

func (x *filesystemsData) afterLoad() {}
func (x *filesystemsData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
}

func (x *mmapMinAddrData) beforeSave() {}
func (x *mmapMinAddrData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("k", &x.k)
}

func (x *mmapMinAddrData) afterLoad() {}
func (x *mmapMinAddrData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.Load("k", &x.k)
}

func (x *hostnameData) beforeSave() {}
func (x *hostnameData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
}

func (x *hostnameData) afterLoad() {}
func (x *hostnameData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
}

func (x *tcpSackData) beforeSave() {}
func (x *tcpSackData) save(m state.Map) {
	x.beforeSave()
	m.Save("DynamicBytesFile", &x.DynamicBytesFile)
	m.Save("stack", &x.stack)
	m.Save("enabled", &x.enabled)
}

func (x *tcpSackData) afterLoad() {}
func (x *tcpSackData) load(m state.Map) {
	m.Load("DynamicBytesFile", &x.DynamicBytesFile)
	m.LoadWait("stack", &x.stack)
	m.Load("enabled", &x.enabled)
}

func init() {
	state.Register("pkg/sentry/fsimpl/proc.FilesystemType", (*FilesystemType)(nil), state.Fns{Save: (*FilesystemType).save, Load: (*FilesystemType).load})
	state.Register("pkg/sentry/fsimpl/proc.subtasksInode", (*subtasksInode)(nil), state.Fns{Save: (*subtasksInode).save, Load: (*subtasksInode).load})
	state.Register("pkg/sentry/fsimpl/proc.taskInode", (*taskInode)(nil), state.Fns{Save: (*taskInode).save, Load: (*taskInode).load})
	state.Register("pkg/sentry/fsimpl/proc.fdDirInode", (*fdDirInode)(nil), state.Fns{Save: (*fdDirInode).save, Load: (*fdDirInode).load})
	state.Register("pkg/sentry/fsimpl/proc.fdSymlink", (*fdSymlink)(nil), state.Fns{Save: (*fdSymlink).save, Load: (*fdSymlink).load})
	state.Register("pkg/sentry/fsimpl/proc.fdInfoDirInode", (*fdInfoDirInode)(nil), state.Fns{Save: (*fdInfoDirInode).save, Load: (*fdInfoDirInode).load})
	state.Register("pkg/sentry/fsimpl/proc.fdInfoData", (*fdInfoData)(nil), state.Fns{Save: (*fdInfoData).save, Load: (*fdInfoData).load})
	state.Register("pkg/sentry/fsimpl/proc.auxvData", (*auxvData)(nil), state.Fns{Save: (*auxvData).save, Load: (*auxvData).load})
	state.Register("pkg/sentry/fsimpl/proc.cmdlineData", (*cmdlineData)(nil), state.Fns{Save: (*cmdlineData).save, Load: (*cmdlineData).load})
	state.Register("pkg/sentry/fsimpl/proc.commInode", (*commInode)(nil), state.Fns{Save: (*commInode).save, Load: (*commInode).load})
	state.Register("pkg/sentry/fsimpl/proc.commData", (*commData)(nil), state.Fns{Save: (*commData).save, Load: (*commData).load})
	state.Register("pkg/sentry/fsimpl/proc.idMapData", (*idMapData)(nil), state.Fns{Save: (*idMapData).save, Load: (*idMapData).load})
	state.Register("pkg/sentry/fsimpl/proc.mapsData", (*mapsData)(nil), state.Fns{Save: (*mapsData).save, Load: (*mapsData).load})
	state.Register("pkg/sentry/fsimpl/proc.smapsData", (*smapsData)(nil), state.Fns{Save: (*smapsData).save, Load: (*smapsData).load})
	state.Register("pkg/sentry/fsimpl/proc.taskStatData", (*taskStatData)(nil), state.Fns{Save: (*taskStatData).save, Load: (*taskStatData).load})
	state.Register("pkg/sentry/fsimpl/proc.statmData", (*statmData)(nil), state.Fns{Save: (*statmData).save, Load: (*statmData).load})
	state.Register("pkg/sentry/fsimpl/proc.statusData", (*statusData)(nil), state.Fns{Save: (*statusData).save, Load: (*statusData).load})
	state.Register("pkg/sentry/fsimpl/proc.ioData", (*ioData)(nil), state.Fns{Save: (*ioData).save, Load: (*ioData).load})
	state.Register("pkg/sentry/fsimpl/proc.oomScoreAdj", (*oomScoreAdj)(nil), state.Fns{Save: (*oomScoreAdj).save, Load: (*oomScoreAdj).load})
	state.Register("pkg/sentry/fsimpl/proc.exeSymlink", (*exeSymlink)(nil), state.Fns{Save: (*exeSymlink).save, Load: (*exeSymlink).load})
	state.Register("pkg/sentry/fsimpl/proc.mountInfoData", (*mountInfoData)(nil), state.Fns{Save: (*mountInfoData).save, Load: (*mountInfoData).load})
	state.Register("pkg/sentry/fsimpl/proc.mountsData", (*mountsData)(nil), state.Fns{Save: (*mountsData).save, Load: (*mountsData).load})
	state.Register("pkg/sentry/fsimpl/proc.ifinet6", (*ifinet6)(nil), state.Fns{Save: (*ifinet6).save, Load: (*ifinet6).load})
	state.Register("pkg/sentry/fsimpl/proc.netDevData", (*netDevData)(nil), state.Fns{Save: (*netDevData).save, Load: (*netDevData).load})
	state.Register("pkg/sentry/fsimpl/proc.netUnixData", (*netUnixData)(nil), state.Fns{Save: (*netUnixData).save, Load: (*netUnixData).load})
	state.Register("pkg/sentry/fsimpl/proc.netTCPData", (*netTCPData)(nil), state.Fns{Save: (*netTCPData).save, Load: (*netTCPData).load})
	state.Register("pkg/sentry/fsimpl/proc.netTCP6Data", (*netTCP6Data)(nil), state.Fns{Save: (*netTCP6Data).save, Load: (*netTCP6Data).load})
	state.Register("pkg/sentry/fsimpl/proc.netUDPData", (*netUDPData)(nil), state.Fns{Save: (*netUDPData).save, Load: (*netUDPData).load})
	state.Register("pkg/sentry/fsimpl/proc.netSnmpData", (*netSnmpData)(nil), state.Fns{Save: (*netSnmpData).save, Load: (*netSnmpData).load})
	state.Register("pkg/sentry/fsimpl/proc.netRouteData", (*netRouteData)(nil), state.Fns{Save: (*netRouteData).save, Load: (*netRouteData).load})
	state.Register("pkg/sentry/fsimpl/proc.netStatData", (*netStatData)(nil), state.Fns{Save: (*netStatData).save, Load: (*netStatData).load})
	state.Register("pkg/sentry/fsimpl/proc.tasksInode", (*tasksInode)(nil), state.Fns{Save: (*tasksInode).save, Load: (*tasksInode).load})
	state.Register("pkg/sentry/fsimpl/proc.statData", (*statData)(nil), state.Fns{Save: (*statData).save, Load: (*statData).load})
	state.Register("pkg/sentry/fsimpl/proc.loadavgData", (*loadavgData)(nil), state.Fns{Save: (*loadavgData).save, Load: (*loadavgData).load})
	state.Register("pkg/sentry/fsimpl/proc.meminfoData", (*meminfoData)(nil), state.Fns{Save: (*meminfoData).save, Load: (*meminfoData).load})
	state.Register("pkg/sentry/fsimpl/proc.uptimeData", (*uptimeData)(nil), state.Fns{Save: (*uptimeData).save, Load: (*uptimeData).load})
	state.Register("pkg/sentry/fsimpl/proc.versionData", (*versionData)(nil), state.Fns{Save: (*versionData).save, Load: (*versionData).load})
	state.Register("pkg/sentry/fsimpl/proc.filesystemsData", (*filesystemsData)(nil), state.Fns{Save: (*filesystemsData).save, Load: (*filesystemsData).load})
	state.Register("pkg/sentry/fsimpl/proc.mmapMinAddrData", (*mmapMinAddrData)(nil), state.Fns{Save: (*mmapMinAddrData).save, Load: (*mmapMinAddrData).load})
	state.Register("pkg/sentry/fsimpl/proc.hostnameData", (*hostnameData)(nil), state.Fns{Save: (*hostnameData).save, Load: (*hostnameData).load})
	state.Register("pkg/sentry/fsimpl/proc.tcpSackData", (*tcpSackData)(nil), state.Fns{Save: (*tcpSackData).save, Load: (*tcpSackData).load})
}
